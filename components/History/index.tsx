import {
  ChartPieIcon,
  DesktopComputerIcon,
  PresentationChartBarIcon,
  PresentationChartLineIcon,
  TableIcon,
} from "@heroicons/react/solid";
import {
  Block,
  Button,
  Card,
  Flex,
  Icon,
  Text,
  TabList,
  Tab,
  Title,
  Subtitle,
  ToggleItem,
  Toggle,
} from "@tremor/react";
import { ChartType, MinimalHistory } from "../../utils/types";
import DynamicChart from "../DynamicChart";
import SyntaxHighlighter from "react-syntax-highlighter";
import { useState } from "react";

export default function History({
  history: { id, prompt_response, response, created_at },
  onSaveHistory,
  onFetchResults,
}: {
  history: MinimalHistory;
  onSaveHistory: (id: number, response?: MinimalHistory["response"]) => void;
  onFetchResults: (id: number) => void;
}) {
  const [selectedView, setSelectedView] = useState("1");
  const [selectedType, setType] = useState<ChartType>(
    response?.type || "Donut"
  );

  const hasResults = response?.results;
  return (
    <Card>
      <Flex
        justifyContent="justify-start"
        alignItems="items-center"
        spaceX="space-x-4"
      >
        <Icon
          variant="light"
          icon={DesktopComputerIcon}
          size="lg"
          color="emerald"
        />
        <Title>Query autogenerated #{id}</Title>
      </Flex>
      <Subtitle>
        <Text truncate={true}>Created on {created_at}</Text>
      </Subtitle>

      <TabList
        defaultValue="1"
        onValueChange={(value) => setSelectedView(value)}
        marginTop="mt-6"
      >
        <Tab value="1" text="SQL" />
        <Tab value="2" text="Result" />
      </TabList>

      {selectedView === "1" && (
        <Block marginTop="mt-5">
          <SyntaxHighlighter
            language="sql"
            customStyle={{
              padding: 40,
              fontSize: 18,
            }}
          >
            {prompt_response || ""}
          </SyntaxHighlighter>
        </Block>
      )}

      {selectedView === "2" && (
        <>
          {hasResults ? (
            <>
              <DynamicChart results={response.results} type={selectedType} />

              <Flex justifyContent="justify-center" marginTop="mt-5">
                <Toggle value={selectedType} onValueChange={setType}>
                  <ToggleItem value="Donut" text="Donut" icon={ChartPieIcon} />
                  <ToggleItem
                    value="Bar"
                    text="Bar"
                    icon={PresentationChartBarIcon}
                  />
                  <ToggleItem
                    value="Line"
                    text="Line"
                    icon={PresentationChartLineIcon}
                  />

                  <ToggleItem value="Table" text="Table" icon={TableIcon} />
                </Toggle>
              </Flex>
              <Flex justifyContent="justify-center" spaceX="space-x-8">
                <Button
                  onClick={() =>
                    onSaveHistory(id, {
                      results: response?.results,
                      type: selectedType,
                    })
                  }
                  marginTop="mt-6"
                  size="md"
                  color="green"
                >
                  Save
                </Button>
                <Button
                  onClick={() => onFetchResults(id)}
                  marginTop="mt-6"
                  size="md"
                  color="lime"
                >
                  Refresh
                </Button>
              </Flex>
            </>
          ) : (
            <Button
              onClick={() => onFetchResults(id)}
              marginTop="mt-6"
              size="md"
              color="green"
            >
              {" "}
              Get results
            </Button>
          )}
        </>
      )}
    </Card>
  );
}
